#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        bluetooth_left {
            if-layers = <1 3>;
            then-layer = <5>;
        };

        bluetooth_right {
            if-layers = <2 4>;
            then-layer = <5>;
        };
    };

    macros {
        alt_sqt: alt_single_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &kp KP_N9>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_SINGLE_QUOTE";
        };

        alt_dqt: alt_double_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &kp KP_N4>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_DOUBLE_QUOTES";
        };

        alt_grave: alt_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N9 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_GRAVE";
        };

        alt_lbkt: alt_left_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N9 &kp KP_N1>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_LEFT_BRACKET";
        };

        alt_rbkt: alt_right_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N9 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_RIGHT_BRACKET";
        };

        alt_lbrc: alt_left_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N1 &kp KP_N2 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_LEFT_BRACE";
        };

        alt_rbrc: alt_right_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N1 &kp KP_N2 &kp KP_N5>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_RIGHT_BRACE";
        };

        alt_lt: alt_less_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N0>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_LESS_THAN";
        };

        alt_gt: alt_greater_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_GREATER_THAN";
        };

        alt_comma: alt_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N4 &kp KP_N4>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_COMMA";
        };

        alt_dot: alt_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N4 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_DOT";
        };

        alt_colon: alt_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N5 &kp KP_N8>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_COLON";
        };

        alt_semicolon: alt_semicolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N5 &kp KP_N9>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_SEMICOLON";
        };

        alt_amps: alt_ampersand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &kp KP_N8>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_AMPERSAND";
        };

        alt_pipe: alt_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N1 &kp KP_N2 &kp KP_N4>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_PIPE";
        };

        alt_dollar: alt_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_DOLLAR";
        };

        alt_hash: alt_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &kp KP_N5>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_HASH";
        };

        alt_num: alt_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N2 &kp KP_N5 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_NUM";
        };

        alt_at: alt_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N4>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_AT";
        };

        alt_tilde: alt_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N1 &kp KP_N2 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_TILDE";
        };

        alt_caret: alt_caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N9 &kp KP_N4>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CARET";
        };

        alt_question: alt_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_QUESTION";
        };

        alt_backslash: alt_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N9 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_BACKSLASH";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_dot {
            bindings = <&alt_dot>;
            key-positions = <31 19>;
            layers = <0>;
        };

        combo_colon {
            bindings = <&alt_colon>;
            key-positions = <19 7>;
            layers = <0>;
        };

        combo_comma {
            bindings = <&alt_comma>;
            key-positions = <20 32>;
            layers = <0>;
        };

        combo_semicolon {
            bindings = <&alt_semicolon>;
            key-positions = <20 8>;
            layers = <0>;
        };

        combo_exclamation {
            bindings = <&kp EXCL>;
            key-positions = <21 33>;
            layers = <0>;
        };

        combo_question {
            bindings = <&alt_question>;
            key-positions = <21 9>;
            layers = <0>;
        };

        combo_single_quote {
            bindings = <&alt_sqt>;
            key-positions = <18 19>;
            layers = <0>;
        };

        combo_double_quotes {
            bindings = <&alt_dqt>;
            key-positions = <6 7>;
            layers = <0>;
        };

        combo_grave {
            bindings = <&alt_grave>;
            key-positions = <30 31>;
            layers = <0>;
        };

        combo_left_bracket {
            bindings = <&alt_lbkt>;
            key-positions = <4 5>;
            layers = <0>;
        };

        combo_left_brace {
            bindings = <&alt_lbrc>;
            key-positions = <28 29>;
            layers = <0>;
        };

        combo_left_parenthesis {
            bindings = <&kp LPAR>;
            key-positions = <16 17>;
            layers = <0>;
        };

        combo_plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <16 28>;
            layers = <0>;
        };

        combo_minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <16 4>;
            layers = <0>;
        };

        combo_multiply {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <15 27>;
            layers = <0>;
        };

        combo_divide {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <15 3>;
            layers = <0>;
        };

        combo_ampersand {
            bindings = <&alt_amps>;
            key-positions = <17 29>;
            layers = <0>;
        };

        combo_pipe {
            bindings = <&alt_pipe>;
            key-positions = <5 17>;
            layers = <0>;
        };
    };

    behaviors {
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <8 19 20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E  &kp R  &kp T      &kp Y       &kp U  &kp I      &kp O    &kp P     &kp LBKT
&kp TAB     &kp A  &kp S  &kp D  &kp F  &kp G      &kp H       &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&sk LCTRL   &kp Z  &kp X  &kp C  &kp V  &kp B      &kp N       &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                          &mo 3  &mo 1  &kp SPACE  &kp LSHIFT  &mo 2  &mo 4
            >;
        };

        NAV {
            bindings = <
&none  &none     &kp LG(TAB)  &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &kp LA(LEFT_SHIFT)  &none      &kp HOME  &kp UP    &kp END    &kp PAGE_UP    &none
&none  &kp LWIN  &kp LALT     &kp LCTRL         &kp LSHIFT         &swapper            &kp ENTER  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN  &none
&none  &none     &none        &none             &none              &none               &none      &kp BSPC  &kp DEL   &none      &none          &none
                              &trans            &trans             &trans              &trans     &trans    &trans
            >;
        };

        NUM {
            bindings = <
&none  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp A   &alt_num    &alt_colon  &kp PRCNT  &alt_caret  &kp D
&none  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp B   &kp LSHIFT  &kp LCTRL   &kp LALT   &kp LWIN    &kp E
&none  &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C   &kp EXCL    &alt_lt     &alt_gt    &kp EQUAL   &kp F
                                   &trans     &trans     &trans        &trans  &trans      &trans
            >;
        };

        SYM {
            bindings = <
&none  &alt_tilde  &alt_at    &alt_hash  &alt_dollar  &none   &alt_pipe  &alt_colon  &alt_semicolon  &alt_question  &kp UNDER     &none
&none  &alt_lt     &alt_lbrc  &alt_lbkt  &kp LPAR     &none   &alt_amps  &alt_dot    &alt_comma      &kp EXCL       &kp MINUS     &none
&none  &alt_gt     &alt_rbrc  &alt_rbkt  &kp RPAR     &none   &none      &alt_dqt    &alt_sqt        &alt_grave     &kp KP_SLASH  &alt_backslash
                              &trans     &trans       &trans  &trans     &trans      &trans
            >;
        };

        FUNC {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none   &kp C_VOL_UP  &kp C_BRI_UP  &none      &none     &none     &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none   &kp C_MUTE    &kp LSHIFT    &kp LCTRL  &kp LALT  &kp LWIN  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none   &kp C_VOL_DN  &kp C_BRI_DN  &none      &none     &none     &none
                        &trans   &trans   &trans  &trans        &trans        &trans
            >;
        };

        BT {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };
    };
};
